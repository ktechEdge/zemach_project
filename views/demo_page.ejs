<%- include ("./Gen_Edge_Design_Main/page_top.ejs") %>
<div>
    <label for="data-selection">Select Data to Display:</label>
    <select id="data-selection">
        <option value="uv_radiation">UV Radiation</option>
        <option value="light">Light</option>
        <option value="air_temperature">Air Temperature</option>
        <option value="air_humidity">Air Humidity</option>
        <option value="soil_humidity">Soil Humidity</option>
    </select>
</div>
<div class="plant-container">
    <% for (let row = 0; row < 12; row++) { %>
        <% for (let col = 0; col < 6; col++) { %>
            <div id="<%= row %>,<%= col %>" class="grid-item device-<%= Math.floor(row / 3) + 1 + col * 4 %>"></div>
        <% } %>
    <% } %>
</div>

<script>
    const letters = ['A', 'B', 'C', 'D', 'E', 'F'];

    document.querySelectorAll('.grid-item').forEach((item) => {
        const [row, col] = item.id.split(',').map(Number);
        const className = letters[col] + (row + 1);
        item.classList.add(className);
        item.textContent = className;
    });

    function fetchDeviceStatuses() {
        return fetch('/plants.json')
            .then(response => response.json())
            .then(data => data);
    }

    function updateGridColors() {
        fetchDeviceStatuses()
            .then(plants => {
                const now = new Date(); // Current date and time
                plants.forEach(plant => {
                    const gridItem = document.getElementById(plant.id);
                    if (gridItem) {
                        const measurementDate = new Date(plant.measurement_date); // Convert measurement_date to Date object
                        const timeDifference = (now - measurementDate) / (1000 * 60); // Time difference in minutes

                        gridItem.classList.remove('connected', 'disconnected');
                        if (timeDifference > 2) {
                            gridItem.classList.add('disconnected'); // Red background for disconnected
                        } else {
                            gridItem.classList.add('connected'); // Default color or green for connected
                        }
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching plant data:', error);
            });
    }


    function displaySelectedData(selectedData) {
        fetchDeviceStatuses()
            .then(plants => {
                plants.forEach(plant => {
                    const gridItem = document.getElementById(plant.id);
                    if (gridItem) {
                        const plantName = gridItem.className.split(' ').find(cls => cls.match(/[A-F]\d+/));
                        gridItem.innerHTML = `${plantName} - ${plant[selectedData]}`;
                    }
                });
            })
            .catch(error => {
                console.error('Error fetching plant data:', error);
            });
    }



    document.getElementById('data-selection').addEventListener('change', function() {
        const selectedData = this.value;
        displaySelectedData(selectedData);
    });
    function getDeviceData() {
        const devices = {};

        document.querySelectorAll('.grid-item').forEach((item) => {
            const [row, col] = item.id.split(',').map(Number);
            const className = letters[col] + (row + 1);
            const deviceNumber = Math.floor(row / 3) + 1 + col * 4;

            if (!devices[deviceNumber]) {
                devices[deviceNumber] = [];
            }
            devices[deviceNumber].push(className);
        });

        return Object.entries(devices).map(([device, plants]) => ({ device: Number(device), plants }));
    }


    function sendDeviceData() {
        const deviceData = getDeviceData();

        fetch('/save_device_data', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(deviceData),
        })
            .then(response => response.json())
            .then(data => {
                console.log('Success:', data);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }


    updateGridColors();
    sendDeviceData();
</script>

<style>
    .connected {
        background-color: green;
    }

    .disconnected {
        background-color: red;
    }
</style>
<%- include ("./Gen_Edge_Design_Main/page_bottom.ejs") %>
